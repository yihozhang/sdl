// Topological Ordering

// Gives a topological ordering over the vertices of an input graph. Note that is works only on input graph is acyclic.

// Graph

// Edges
.input edge(filename="edge.facts")
.decl edge(v1:number, v2:number)

// Vertices
.decl vertex(v:number) 
vertex(v) :- edge(v,_).
vertex(v) :- edge(_,v).


// Tests if vertex v1 proceeds vertex v2 in the ordering.
.output is_before(filename="is_before.ans")
.decl is_before(v1:number, v2:number)

// Tests if vertex v1 succeeds vertex v2 in the ordering.
.output is_after(filename="is_after.ans")
.decl is_after(v1:number, v2:number)

// Gives the possible indices of the vertices in the ordering.
.output indices(filename="indices.ans")
.decl indices(v:number, i:number)

// Gives the exact index of the vertex in the ordering.
.output index(filename="index.ans")
.decl index(v:number, i:number)

// Vertex x is before vertex y if the graph has an edge from x to y.
is_before(x, y) :-
    edge(x, y).

// Vertex x is before vertex y if some vertex z is before x and z is before y.
is_before(x, y) :-
    is_before(x, z),
    is_before(z, y).

// Vertex x is after vertex y if the graph has an edge from y to x.
is_after(x, y) :-
    edge(y, x).

// Vertex x is after vertex y if some vertex z is after x and y is after z.
is_after(x, y) :-
    is_after(z, x),
    is_after(y, z).

// The index of a vertex x is 0 if it has no inbound or outbound edges.
indices(x, 0) :-
    vertex(x),
    !edge(_, x),
    !edge(x, _).

// The index of a vertex x is 1 if it has no inbound but only outbound edges.
indices(x, 1) :-
    vertex(x),
    !edge(_, x),
    edge(x, _).

// The possible indices of a vertex x are 1 more than the index of some vertex y if that vertex y is before x but not after x.
indices(x, i+1) :-
    is_before(y, x),
    !is_before(x, y),
    is_after(x, y),
    indices(y, i).

// The exact index of a vertex is the maximum of its possible indices.
index(x, i) :-
    indices(x, i),
    !indices(x, i+1).