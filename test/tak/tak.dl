.output tak(filename="tak.ans")
.decl tak(X:number, Y:number, Z:number, V:number, Q:number)

tak(X,Y,Z,Y,0) :- Y >= X, natural(X), natural(Y), natural(Z).
tak(X,Y,Z,V,Q1+Q2+Q3+Q4+1) :- tak(X-1,Y,Z,V1,Q1), tak(Y-1,Z,X,V2,Q2), tak(Z-1,X,Y,V3,Q3), 
                              tak(V1,V2,V3,V,Q4), Y < X.

.input low1(filename="low1.facts")
.decl low1(x:number)
.input low2(filename="low2.facts")
.decl low2(x:number)
.input high1(filename="high1.facts")
.decl high1(x:number)
.input high2(filename="high2.facts")
.decl high2(x:number)

.decl natural(N:number)

natural(x) :- low1(x).

natural(n+1) :- natural(n), high1(h), n < h.


/* N : index
 * Q : the value of the N'th Takeuchi number. */
.output query(filename="query.ans")
.decl query(N: number, Q:number)

query(N, Q) :- tak(N, 0, N+1, _, Q), low2(l), high2(h), N >= l, N < h.

